/* Clock Region */

{{{toJSON (@root.clockAPI.getClockDomain)}}}

{{{toJSON (@root.clockAPI.getClockFrequencies)}}}

{{{toJSON (@root.clockAPI.getClockValues)}}}

{{{toJSON (@root.clockAPI.getClockIds)}}}

/* Pinout Region */

{{{toJSON (@root.pinoutAPI.getDomain)}}}

{{{toJSON (@root.pinoutAPI.getHwInstanceSignalsConfig  "ADF1")}}}

{{{toJSON (@root.pinoutAPI.getGPIOsConfig)}}}

/* Global Context*/

{{{toJSON (@root.ContextAPI.isActivatedModule 'DMA')}}}

{{{toJSON (@root.ContextAPI.getResources)}}}

{{{toJSON (@root.ContextAPI.getGlobalContext)}}}



{{! New template proposal to work with the HOOKS ~}}
{{! get_myctx returns ~
                instances: [...SWinstances],
                resource:element.resource.toUpperCase(),
    We may, in the future, also get the grouping strategy in this context object.
    Today the HOOK has only 1 strategy: grouping all SW instances piloting the same HW instance.
}}
{{! This is a temporary solution while waiting for the getters ~}}
{{#get_myctx~}}
{{#with _myctx~}}
{{log "CRC template _myctx:" this~}}
{{assign 'current_resource' this.resource~}}
{{log "CRC template current_resource:" current_resource~}}
/**
  ******************************************************************************
  * @file           : stm32_{{lowercase @root.current_resource}}.c
  * @brief          : Peripheral initialization
  *                   File per peripheral instance that is handling the peripheral
  *                   initialization and the IRQ handlers. Init parameters provided
  *                   as a set of defines configurable/generated for a given target
  *                   through the  hal_usart_settings.json and the config tool.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) {{COPYRIGHT}} STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  *{{LICENSE}}
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32_{{lowercase @root.current_resource}}.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private functions prototype------------------------------------------------*/
/* Exported variables by reference--------------------------------------------*/
{{! Only 1 handle for all sw instances: this works if we have only 1 functionality and 1 API level but WILL BE UPDATED}}
{{! each SW instance can have an alias to this handle}}
{{log "==> declare handle for: " @root.current_resource~}}
static CRC_HandleTypeDef gh_{{lowercase @root.current_resource}};

{{#each this.instances}}
{{assign 'current_instance_index' instanceid~}}
{{#each this.configs}}
void *{{lowercase @root.current_resource}}_instance{{@root.current_instance_index}}{{addConfigLC cfg_name}}_init(void)
{
  /* Configure {{lowercase @root.current_resource}} */
  gh_{{lowercase @root.current_resource}}.Instance                    = {{@root.current_resource}};

{{#each CRC_InitTypeDef}}
{{#if (eq @key 'DefaultInitValueUse')~}}
  gh_{{lowercase @root.current_resource}}.Init.{{@key}} = DEFAULT_INIT_VALUE_{{#if this}}ENABLE{{else}}DISABLE{{/if}};
{{else if (eq @key 'DefaultPolynomialUse')~}}
  gh_{{lowercase @root.current_resource}}.Init.{{@key}} = DEFAULT_POLYNOMIAL_{{#if this}}ENABLE{{else}}DISABLE{{/if}};
{{else if (eq @key 'CRCLength')~}}
  gh_{{lowercase @root.current_resource}}.Init.{{@key}} = CRC_POLYLENGTH_{{this}}B;
{{else if (eq @key 'OutputDataInversionMode')~}}
  gh_{{lowercase @root.current_resource}}.Init.{{@key}} = CRC_OUTPUTDATA_INVERSION_{{#if this}}ENABLE{{else}}DISABLE{{/if}};
{{else if (eq @key 'CRC_Polynomial')~}}
  gh_{{lowercase @root.current_resource}}.Init.GeneratingPolynomial = {{this.value}};
  gh_{{lowercase @root.current_resource}}.Init.CRCLength = CRC_POLYLENGTH_{{this.size}}B;
{{else~}}
  gh_{{lowercase @root.current_resource}}.Init.{{@key}} = {{this}};
{{/if}}
{{/each}}
  if (HAL_CRC_Init(&gh_{{lowercase @root.current_resource}}) != HAL_OK)
  {
    return NULL;
  }

  return (void *)&gh_{{lowercase @root.current_resource}};
}
{{/each}}
{{/each}}

void {{lowercase @root.current_resource}}_deinit(void)
{
  (void)HAL_CRC_DeInit(&gh_{{lowercase @root.current_resource}});
}

void *{{lowercase @root.current_resource}}_getobject(void)
{
  return (void *)&gh_{{lowercase @root.current_resource}};
}


/**
  * @brief CRC MSP Initialization
  * This function configures the hardware resources used in this example
  * @param hcrc CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
{
  if (hcrc->Instance == CRC)
  {
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
  }
}

/**
  * @brief CRC MSP De-Initialization
  * This function freeze the hardware resources used in this example
  * @param hcrc CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
{
  if (hcrc->Instance == CRC)
  {
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
  }
}

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
{{/with~}}
{{/get_myctx~}}

